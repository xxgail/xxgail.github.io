{"title":"Redis","slug":"Redis","date":"2018-01-10T06:55:31.000Z","updated":"2018-01-22T08:06:01.199Z","comments":true,"path":"api/articles/Redis.json","photos":[],"link":"","excerpt":"nosql的一种<br>","covers":null,"content":"<p>nosql的一种<br><a id=\"more\"></a></p>\n<h2 id=\"1-redis简介\"><a href=\"#1-redis简介\" class=\"headerlink\" title=\"1. redis简介\"></a>1. redis简介</h2><p>Redis 是一个key-value 的nosql产品，和我们熟知的memcached有些类似，但它存储的value类型相对更加丰富，包括String(字符串)、list(链接)、set(集合)、zset(sorted set 有序集合)和hash。与memcached一样，为了保证效率，数据都是缓存在内存中。区别是Redis会周期性的把内存中的数据写到硬盘中(被称为数据持久化)，同时由于Redis支持的value类型众多，也被称为结构化的nosql数据库。对数据的完整性更加友好</p>\n<ul>\n<li>网站: <a href=\"http://redis.io/\" target=\"_blank\" rel=\"noopener\">http://redis.io/</a></li>\n<li>国内社区: <a href=\"http://www.redis.cn/\" target=\"_blank\" rel=\"noopener\">http://www.redis.cn/</a></li>\n</ul>\n<h2 id=\"2-nosql简介\"><a href=\"#2-nosql简介\" class=\"headerlink\" title=\"2.nosql简介\"></a>2.nosql简介</h2><p>由于目前属于web2.0的时代，nosql的产品现在非常火热。常见的有:Redis、memcached、MongoDB(全栈开发工程师)。<br>nosql有两个非常显著地特点:</p>\n<ul>\n<li>nosql产品一般不使用严格的表结构(行和列)</li>\n<li>nosql产品数据的查询一般都不再使用SQL查询<br>网站: <a href=\"http://nosql-database.org/列出了世界上目前正在使用的nosql产品\" target=\"_blank\" rel=\"noopener\">http://nosql-database.org/列出了世界上目前正在使用的nosql产品</a></li>\n</ul>\n<h2 id=\"3-常见的nosql产品的比较\"><a href=\"#3-常见的nosql产品的比较\" class=\"headerlink\" title=\"3. 常见的nosql产品的比较\"></a>3. 常见的nosql产品的比较</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>主要产品</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KV存储</td>\n<td>Redis、Memcached</td>\n<td>使用key快速查到其value，memcached支持string类型的value，Redis除string类型外还支持set、hash、sort set、list等类型</td>\n</tr>\n<tr>\n<td>文档存储</td>\n<td>MongoDB、CouchDB</td>\n<td>使用json或类json数据结构，存储内容为文档型，能实现部分关系数据库的功能</td>\n</tr>\n<tr>\n<td>列存储</td>\n<td>HBase、Cassandra</td>\n<td>安装列进行数据存储，便于存储结构化和半结构化数据，方便做数据压缩和针对某一列和某几列的数据查询</td>\n</tr>\n<tr>\n<td>图存储</td>\n<td>Neo4J、FlockDB</td>\n<td>图形关系的存储，能够很好弥补关系数据库在图形存储的不足</td>\n</tr>\n<tr>\n<td>对象存储</td>\n<td>DB4o、Versant</td>\n<td>通过类似面向对象语言的方式操作数据库，通过对象的方式存储数据</td>\n</tr>\n<tr>\n<td>XML数据库</td>\n<td>Berkeley DB XML、BaseX</td>\n<td>高效存储XML数据，支持XML的内部查询语法，如XQuery、XPath</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4-安装与启动\"><a href=\"#4-安装与启动\" class=\"headerlink\" title=\"4.安装与启动\"></a>4.安装与启动</h2><ul>\n<li>打开一个 cmd 窗口 使用cd命令切换目录到 C:\\redis 运行 redis-server.exe redis.windows.conf </li>\n<li>另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379 。</li>\n</ul>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"1-string类型\"><a href=\"#1-string类型\" class=\"headerlink\" title=\"1.-string类型\"></a>1.-string类型</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设置</td>\n<td>set key value </td>\n</tr>\n<tr>\n<td>获取值</td>\n<td>get key</td>\n</tr>\n<tr>\n<td>自增操作(对相对应的value+1)</td>\n<td>incr key</td>\n</tr>\n<tr>\n<td>自减操作(对相对应的value-1)</td>\n<td>decr key</td>\n</tr>\n<tr>\n<td>增加固定的值</td>\n<td>incrby key 11(增加的值)</td>\n</tr>\n<tr>\n<td>减少固定的值</td>\n<td>decrby key 11(减少的值)</td>\n</tr>\n<tr>\n<td>获取所有key</td>\n<td>keys*</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>redis中的key一般是怎么设计的？<ol>\n<li>把mysql里面的表名换成redis里面的key前缀(user前缀)</li>\n<li>把mysql表里面的主键名称放在上面的前缀后面，一般使用冒号分割(uesr:id)</li>\n<li>对应记录的主键值做key的第三部分(user:id:1)</li>\n<li>把mysql里面的其他字段作为key的第四部分(user:id:1:username)</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-hash类型\"><a href=\"#2-hash类型\" class=\"headerlink\" title=\"2.-hash类型\"></a>2.-hash类型</h2><ol>\n<li>redis 里面的hash类型有点类似于PHP里的关联数组</li>\n<li>设置单个值:hset userInfo name gail。userInfo是key,等价于这样的数据结构 $userInfo = array(‘name’=&gt;’gail’)</li>\n<li>获取:hget userInfo name</li>\n<li>设置多个值:hmset userInfo age 11 email 11@qq.com</li>\n<li>获取多个值:hgetall userInfo</li>\n</ol>\n<h2 id=\"3-list类型\"><a href=\"#3-list类型\" class=\"headerlink\" title=\"3.-list类型\"></a>3.-list类型</h2><ol>\n<li>redis里面的list类型被称为链表数据类型(类似于队列，先进先出</li>\n<li>lpush 向链表的头部放入数据(left push):lpush link1 A</li>\n<li>rpush 向链表的尾部放入数据(right push):right link2 C</li>\n<li>lrange 获取链表中的数据 lrange 0 -1(0代表第一个单元，-1代表最后一个单元)</li>\n<li>lpop 在链表的左侧弹出数据(第一个</li>\n<li>rpop 在链表的右侧弹出数据(最后一个</li>\n<li>链表数据结构在实际项目中的使用:<ul>\n<li>例如，现在后台要统计一下最新登录的10个用户。创建一个list类型，从链表的左侧加入最近登录的用户主键id，当里面的单元超过10个后，只需要把最右侧的那个单元弹出即可。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"4-zset类型\"><a href=\"#4-zset类型\" class=\"headerlink\" title=\"4.-zset类型\"></a>4.-zset类型</h2><ol>\n<li>redis里面的zset类型被称为有序集合，意味着有序集合里面的元素是排好序的，也满足唯一性和确定性。</li>\n<li>有序集合，需要给集合里面的每个元素一个排序的权重(1~9，a~z)</li>\n<li>zadd 添加元素<ul>\n<li>zadd class:phpRank 1 aa</li>\n<li>zadd class:phpRank 2 bb</li>\n</ul>\n</li>\n<li>zrange 获取所有数据 zrange class:phpRank 0 -1</li>\n<li>zrange class:phpRank 0 -1 withscores 获取数据和权重信息</li>\n<li></li>\n</ol>\n","categories":[{"name":"编程","slug":"编程","count":12,"path":"api/categories/编程.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"nosql","slug":"nosql","count":1,"path":"api/tags/nosql.json"}]}