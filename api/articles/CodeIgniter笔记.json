{"title":"CodeIgniter笔记","slug":"CodeIgniter笔记","date":"2017-11-20T08:35:02.000Z","updated":"2017-12-21T09:45:54.961Z","comments":true,"path":"api/articles/CodeIgniter笔记.json","photos":[],"link":"","excerpt":"阅读CodeIgniter手册<br>","covers":null,"content":"<p>阅读<a href=\"http://codeigniter.org.cn/user_guide/general/welcome.html\" target=\"_blank\" rel=\"noopener\">CodeIgniter手册</a><br><a id=\"more\"></a></p>\n<h1 id=\"常规主题\"><a href=\"#常规主题\" class=\"headerlink\" title=\"常规主题\"></a>常规主题</h1><h2 id=\"1-Codelgniter-URL\"><a href=\"#1-Codelgniter-URL\" class=\"headerlink\" title=\"1.Codelgniter URL\"></a>1.Codelgniter URL</h2><ol>\n<li>config.php </li>\n<li>添加URL后缀 :  $config[‘url_suffix’] = ‘’;</li>\n<li>启用查询字符串：$config[‘enable_query_strings’] = FALSE</li>\n</ol>\n<h2 id=\"2-控制器\"><a href=\"#2-控制器\" class=\"headerlink\" title=\"2.控制器\"></a>2.控制器</h2><ol>\n<li>文件名必须是大写字母开头，如：’Blog.php’ 。</li>\n<li>类名必须以大写字母开头，一定要继承父类控制器。</li>\n<li><p>重映射  _ remap() 方法，无论URI中包含什么参数时都会调用该方法。它允许你定义你自己的路由规则，重写默认的使用URI中的分段来决定调用哪个方法这种行为。</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//被重写的方法通过参数传入</span></span><br><span class=\"line\"><span class=\"comment\">//方法名后的其他字段为第二个参数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_remap</span><span class=\"params\">($method,$array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($method === <span class=\"string\">'some_method'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;$method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;default_method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>构造函数必须有 <code>parent::__construct();</code> :因为构造函数会覆盖原有的父类函数</li>\n<li>函数不要和保留名称一致</li>\n</ol>\n<h2 id=\"3-视图\"><a href=\"#3-视图\" class=\"headerlink\" title=\"3.视图\"></a>3.视图</h2><ol>\n<li>$data 作为可以传输进去的动态数据<code>$this-&gt;load-&gt;view(&#39;index&#39;,$data)</code>。还可以使用对象。如果视图建在view的子文件中，则需要加上路径。</li>\n</ol>\n<h2 id=\"4-模型\"><a href=\"#4-模型\" class=\"headerlink\" title=\"4.模型\"></a>4.模型</h2><ol>\n<li>命名规则：首字母大写。类名与文件名一致</li>\n<li>加载模型 <code>$this-&gt;load-&gt;model($model_name,$model_name2,TRUE)</code>,第二个参数是该模型的别名,第三个参数为TRUE让模型在加载时自动连接数据库。</li>\n<li>调用模型中的方法 <code>$this-&gt;model_name-&gt;fun()</code>。</li>\n<li><p>可以通过加载模型时第三个参数连接数据库</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$config[<span class=\"string\">'hostname'</span>] = <span class=\"string\">'localhost'</span>;</span><br><span class=\"line\">$config[<span class=\"string\">'username'</span>] = <span class=\"string\">'myusername'</span>;</span><br><span class=\"line\">$config[<span class=\"string\">'password'</span>] = <span class=\"string\">'mypassword'</span>;</span><br><span class=\"line\">$config[<span class=\"string\">'database'</span>] = <span class=\"string\">'mydatabase'</span>;</span><br><span class=\"line\">$config[<span class=\"string\">'dbdriver'</span>] = <span class=\"string\">'mysqli'</span>;</span><br><span class=\"line\">$config[<span class=\"string\">'dbprefix'</span>] = <span class=\"string\">''</span>;</span><br><span class=\"line\">$config[<span class=\"string\">'pconnect'</span>] = <span class=\"keyword\">FALSE</span>;</span><br><span class=\"line\">$config[<span class=\"string\">'db_debug'</span>] = <span class=\"keyword\">TRUE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;load-&gt;model(<span class=\"string\">'model_name'</span>, <span class=\"string\">''</span>, $config);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"5-辅助函数\"><a href=\"#5-辅助函数\" class=\"headerlink\" title=\"5.辅助函数\"></a>5.辅助函数</h2><ol>\n<li>位置(app/helper和system/helper)</li>\n<li>加载辅助函数：$this-&gt;load-&gt;helper(‘name’)。(name 参数为辅助函数的文件名，去掉 .php 文件后缀以及 _helper 部分)</li>\n<li>加载多个辅助函数只需在helper中写一个array。</li>\n<li>扩展辅助函数。在app/helper文件夹下写文件，和已存在的辅助函数文件名相同，但需要在前面加MY_。</li>\n</ol>\n<h2 id=\"6-使用CodeIgniter类库\"><a href=\"#6-使用CodeIgniter类库\" class=\"headerlink\" title=\"6.使用CodeIgniter类库\"></a>6.使用CodeIgniter类库</h2><ol>\n<li>引用,需要在控制器中初始化 $this-&gt;load-&gt;library(‘class_name’);</li>\n<li>除了数据库类不能被扩展或被你的类替换外，其他的类都可以。</li>\n<li><p>类定义的格式</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">defined(<span class=\"string\">'BASEPATH'</span>) <span class=\"keyword\">OR</span> <span class=\"keyword\">exit</span>(<span class=\"string\">'No direct script access allowed'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Someclass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">some_method</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建之后就可以通过名字-&gt;方法来引用</p>\n</li>\n<li>在初始化的时候，你可以通过第二个参数动态的传递一个数组数据，该数组将被传到 你的类的构造函数中，此时在构造函数中需加入同名参数。</li>\n</ol>\n<h2 id=\"7-驱动器\"><a href=\"#7-驱动器\" class=\"headerlink\" title=\"7.驱动器\"></a>7.驱动器</h2><ol>\n<li>系统驱动器的位置(system/libraries/),还应该有一个drivers子目录，用于存放子类文件</li>\n<li><p>调用：</p>\n <figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"function\"><span class=\"title\">this</span>-&gt;</span><span class=\"function\"><span class=\"title\">load</span>-&gt;</span>drivers(<span class=\"string\">'qudongqi'</span>);</span><br><span class=\"line\">$<span class=\"function\"><span class=\"title\">this</span>-&gt;</span><span class=\"function\"><span class=\"title\">qudongqi</span>-&gt;</span>fangfa();</span><br><span class=\"line\">$<span class=\"function\"><span class=\"title\">this</span>-&gt;</span><span class=\"function\"><span class=\"title\">qudongqi</span>-&gt;</span><span class=\"function\"><span class=\"title\">zilei</span>-&gt;</span>fangfa();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建驱动器</p>\n</li>\n</ol>\n<ul>\n<li>/application/libraries/Driver_name<ul>\n<li>Driver_name.php</li>\n<li>drivers<ul>\n<li>Driver_name_subclass_1.php</li>\n<li>Driver_name_subclass_2.php</li>\n<li>Driver_name_subclass_3.php</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-创建核心类\"><a href=\"#8-创建核心类\" class=\"headerlink\" title=\"8.创建核心类\"></a>8.创建核心类</h2><ol>\n<li>位置(app/core)</li>\n<li><p>代码</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MY_Input</span> <span class=\"keyword\">extends</span> <span class=\"title\">CI_Input</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">parent</span>::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建附属类</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $CI;</span><br><span class=\"line\">$CI =&amp; get_instance();<span class=\"comment\">//在构造函数中</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"9-代码规范\"><a href=\"#9-代码规范\" class=\"headerlink\" title=\"9.代码规范\"></a>9.代码规范</h2><ol>\n<li>PHP结束标签 ?&gt; 替换成空行</li>\n<li>命名规则</li>\n</ol>\n<ul>\n<li>类文件首字母要大写，其他文件命名全是小写</li>\n<li>类文件名称要与文件名保持一致</li>\n<li>类名首字母大写，用下划线命名不要用驼峰命名</li>\n<li>方法全部小写，下划线</li>\n<li>变量命名全小写使用下划线分割</li>\n<li>单行注释挨着代码，多行注释空一行</li>\n<li>常量全部大写</li>\n<li>TRUE、FALSE、NULL全部大写</li>\n</ul>\n<ol>\n<li>逻辑操作符用OR(不要用||)和&amp;&amp;(不要用AND)</li>\n<li>对返回值比较一定要用严格类型比较(===和！==)</li>\n<li>调试代码不要出现在代码中，注释掉也不行</li>\n<li>文件起始标签和结束标签不要有空格</li>\n<li>一个类一个文件</li>\n<li>用Tab代替空格</li>\n<li>大括号独占一行</li>\n<li>中括号和小括号中不要有空格，逻辑词与小括号之间有空格，为了区分函数</li>\n<li>只能在内部访问的方法和变量应该以下划线开头</li>\n<li>字符串使用单引号引起来，当字符串中有变量时使用双引号，<strong>并且使用大括号将变量包起来。</strong> 另外，当字符串中有单引号时，也应该使用双引号，这样就不用使用转义符。</li>\n<li>SQL查询使用大写，长的查询分成多行</li>\n</ol>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>helper 辅助函数</li>\n</ul>\n<h1 id=\"类库参考\"><a href=\"#类库参考\" class=\"headerlink\" title=\"类库参考\"></a>类库参考</h1><h2 id=\"1-基准测试类\"><a href=\"#1-基准测试类\" class=\"headerlink\" title=\"1.基准测试类\"></a>1.基准测试类</h2><ol>\n<li><p>使用基准测试点</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;benchmark-&gt;mark(<span class=\"string\">'code_start'</span>);</span><br><span class=\"line\"><span class=\"comment\">//标记一个起始点</span></span><br><span class=\"line\"><span class=\"comment\">// Some code happens here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;benchmark-&gt;mark(<span class=\"string\">'code_end'</span>);</span><br><span class=\"line\"><span class=\"comment\">//标记一个结束点</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;benchmark-&gt;elapsed_time(<span class=\"string\">'code_start'</span>, <span class=\"string\">'code_end'</span>);</span><br><span class=\"line\"><span class=\"comment\">//计算时间差</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示总执行时间</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;benchmark-&gt;elapsed_time();<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在视图在显示内存占用</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;benchmark-&gt;memory_usage();<span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&#123;memory_usage&#125;<span class=\"comment\">//或者使用伪变量</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-加载配置文件\"><a href=\"#2-加载配置文件\" class=\"headerlink\" title=\"2.加载配置文件\"></a>2.加载配置文件</h2><ol>\n<li><p>手工加载</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;config-&gt;load(<span class=\"string\">'filename'</span>,<span class=\"keyword\">TRUE</span>,<span class=\"keyword\">TRUE</span>);</span><br><span class=\"line\"><span class=\"comment\">//第二个参数为TRUE表示每个配置文件中的配置会被存储到以该配置文件名为索引的数组中去</span></span><br><span class=\"line\"><span class=\"comment\">//第三个参数用于抑制错误信息，当配置文件不存在时，不会报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动加载，将配置文件放到autoload.php中</p>\n</li>\n<li><p>获取配置项</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;config-&gt;item(<span class=\"string\">'item_name'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置配置项</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;config-&gt;set_item(<span class=\"string\">'item_name'</span>, <span class=\"string\">'item_value'</span>);、<span class=\"comment\">//item_name 是你希望修改的 $config 数组的索引名，item_value 为要设置的值。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多环境：index.php文件中定义了ENVIRONMENT常量，可以加载不同的配置文件。</p>\n</li>\n</ol>\n","categories":[{"name":"编程","slug":"编程","count":12,"path":"api/categories/编程.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"框架","slug":"框架","count":3,"path":"api/tags/框架.json"}]}